{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/helpers/getGifs.js","components/GifGrid.js","components/hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","img","title","id","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","class","item","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"yMAoCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAkBvC,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAnBoB,SAACP,GACzBF,EAAeE,EAAEQ,OAAOF,aCGbG,EAVK,SAAC,GAA6B,IAAD,IAA3BC,IAAUC,GAAiB,EAArBC,GAAqB,EAAjBD,OAAOE,EAAU,EAAVA,IAErC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAMF,EAAMG,IAAML,IACvB,4BAAKA,Q,uBCHEM,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfN,EADe,iDACiCO,UAAUF,GAD3C,+DAEHG,MAAMR,GAFH,cAEfS,EAFe,gBAGAA,EAAIC,OAHJ,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAhB,GAAQ,IAAD,EAC5B,MAAO,CACLE,GAAIF,EAAIE,GACRD,MAAOD,EAAIC,MACXE,IAAG,UAAEH,EAAIiB,cAAN,aAAE,EAAYC,iBAAiBf,QATjB,kBAYdY,GAZc,4CAAH,sDCeLI,EAfC,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECAN,SAACA,GAAc,IAAD,EACdtB,mBAAS,CACjC4B,KAAM,GACNM,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OARAC,qBAAW,WACThB,EAAQC,GACLgB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACrBR,KAAMW,EACNL,SAAS,SAEZ,CAACZ,IAEGa,EDZwBK,CAAalB,GAAhCS,EAFoB,EAEzBH,KAAaM,EAFY,EAEZA,QAEpB,OACE,gCACE,6BAAKZ,IACHY,GAAW,qBAAKO,MAAM,kBACxB,qBAAKvB,UAAU,eAAf,SACGa,EAAOD,KAAI,SAAAY,GAAI,OAAI,cAAC,EAAD,CAA2B5B,IAAK4B,GAAdA,EAAK1B,aEWpC2B,EAnBM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,cAFrB,mBAElB4C,EAFkB,KAEN7C,EAFM,KAKzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BACG6C,EAAWd,KAAK,SAACe,GAAD,OAAS,cAAC,EAAD,CAAmBvB,SAAWuB,GAAhBA,Y,MCXhDC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.40344a64.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\n  const [inputValue, setInputValue] = useState('')\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue( e.target.value )\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if( inputValue.trim().length > 2) {\r\n      setCategories( cats => [inputValue, ...cats] )\r\n      setInputValue('')\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input\r\n        type=\"text\"  \r\n        value={ inputValue }\r\n        onChange={ handleInputChange }\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\nconst GifGridItem = ({img: {id, title, url}}) => {\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__zoomIn\">\r\n      <img src={ url } alt={ title }/>\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GifGridItem;","\r\n\r\n\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=28q25NYFlUhjhWQ8fIi8aZFumPQoyfAu`\r\n  const res = await fetch(url)\r\n  const {data} = await res.json();\r\n\r\n  const gifs = data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  })\r\n  return gifs;\r\n}","import GifGridItem from './GifGridItem'\r\nimport { useFetchGifs } from './hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n  const {data:images, loading} = useFetchGifs(category);\r\n  \r\n  return (\r\n    <div>\r\n      <h3>{category}</h3>\r\n      { loading && <div class=\"lds-dual-ring\"></div>}\r\n      <div className=\"containerCat\">\r\n        {images.map(item => <GifGridItem key={item.id} img={item}/> )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GifGrid;","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect( () => {\r\n    getGifs(category)\r\n      .then(imgs => setState({\r\n        data: imgs,\r\n        loading: false\r\n      }));\r\n  }, [category])\r\n\r\n  return state;\r\n}","import { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [categories, setCategories] = useState(['One Punch'])\r\n\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={ setCategories }/>\r\n      <hr/>\r\n\r\n\r\n      <ul>\r\n        {categories.map( (cat) => <GifGrid key={cat} category={ cat }/>)}\r\n      </ul>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}